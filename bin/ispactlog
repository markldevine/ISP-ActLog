#!/usr/bin/env raku

use KHPH;
use Terminal::ANSIColor;
use Data::Dump::Tree;   
#use Grammar::Debugger; 
#use Grammar::Tracer;

my %isp-servers     = (
                        ISPLC01 => 0,
                        ISPLC02 => 0,
                      );
#constant @redis-servers = <jgstmgtgate1lpv.wmata.local ctstmgtgate1lpv.wmata.local>;

#my @redis-clis;
#for @redis-servers -> $redis-server {
#    my @cmd-string = sprintf("ssh -L 127.0.0.1:6379:%s:6379 %s /usr/bin/redis-cli", $redis-server, $redis-server).split: /\s+/;
#    @redis-clis.push: @cmd-string;
#}

#for @redis-clis -> @redis-cli {
#put @redis-cli;
#    my @rcmd        = flat @redis-cli,
#                      '--raw',
#                      'KEYS',
#                      'eb:isp:servers:*';
#    my $proc        = run   @rcmd, :out, :err;
#    my $out         = $proc.out.slurp(:close);
#    my $err         = $proc.err.slurp(:close);
#    fail 'FAILED: ' ~ @rcmd ~ ":\t" ~ $err if $err;
#    if $out {
#        my @ispssks = $out.chomp.split("\n");
#        die "No ISP server site keys!" unless @ispssks;
#        @rcmd    = flat @redis-cli,
#                   '--raw',
#                   'SUNION',
#                   @ispssks;
#        $proc    = run   @rcmd, :out, :err;
#        $out     = $proc.out.slurp(:close);
#        $err     = $proc.err.slurp(:close); 
#        fail 'FAILED: ' ~ @rcmd ~ ":\t" ~ $err if $err;
#        if $out {
#            %isp-servers = $out.chomp.split("\n").map: { $_.uc => 0 };
#            last;
#        }
#    }
#}

# $s.stdout.lines.tap: { .say if .lc.contains(any <gfldex peppmeyer>) }

sub MAIN (
    Str:D   :$isp-server!,                          #= ISP server name
    Str:D   :$isp-admin!,                           #= ISP admin name
) {
    my $SERVER_NAME = $isp-server.uc;
    die '--isp-server-name not any of ' ~ %isp-servers.keys.sort unless %isp-servers{$SERVER_NAME}:exists;
    my $proc                = run   
#                           '/usr/bin/stdbuf',
#                           '-i0',
#                           '-o0',
#                           '-e0',
                            '/usr/bin/dsmadmc',
                            '-SE=' ~ $isp-admin ~ '_' ~ $SERVER_NAME,
                            '-ID=' ~ $isp-admin,
                            '-PA=' ~ KHPH.new(:stash-path($*HOME ~ '/.isp/admin/' ~ $SERVER_NAME ~ '/' ~ $isp-admin ~ '.khph')).expose,
#                           '-TABDELIMITED',
                            '-CONSOLE',
#                           'QUERY',
#                           'ACTLOG',
#                           'BEGINTIME=NOW',
                            :err,
                            :out;
#   my $err                 = $proc.err.slurp(:close);      put $err;
#   my $out                 = $proc.out.slurp(:close);      put $out;

    my $lines = supply {
        whenever start $proc.out.Supply {
            whenever .lines { put 'X'; .emit }
        }
    }.Channel;

    my $running = True;
    $lines.closed.then: { $running = False }

    while $running {
        with $lines.poll() -> $line {
            put "Process '$line'";
        }
        put 'Do something else...';
        sleep ½;
        sleep ½;
    }
    put "I'm done.";
}

=finish

### my $lines = $*IN.Supply.lines.Channel;
#   my $lines = supply {
#       whenever start $*IN.Supply {
#           whenever .lines { .emit }
#       }
#   }.Channel;

#   my $running = True;
#   $lines.closed.then: { $running = False }

#   while $running {
#       with $lines.poll() -> $line {
#           put "Process '$line'";
#       }
#       put 'Do something else...';
#       sleep ½;
#   }
#   put "I'm done.";
}
